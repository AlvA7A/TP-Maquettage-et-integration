/**
 * Utilise uglify-js
 * Minifie tous les fichiers js dans le répertoire 'js' et les enregistre dans le dossier cssMin.
 * et en créant un source map pour chaque fichier minifié.
 * @param {String} imputFilePath - chemin d'accès du fichier d'entrée à compresser.
 * @param {String} outputFilePath - chemin d'accès du fichier de sortie à compresser
 * Utilise le module fs pour parcourir le dossier "js".
 * Les fichiers minifiés sont enregistrés dans le repertoire 'jsMin' avec l'extension '.min.js'.
 **/
const fs=require("fs"),UglifyJS=require("uglify-js");
//parcours tous les fichier dans le dissier "js"
fs.readdirSync("../js").forEach(e=>{
//Vérifie si le fichier se termine par '.js'
var s;e.endsWith(".js")&&(s="../js/"+e,e="../jsMin/"+e.replace(/\.js$/,".min.js"),s=UglifyJS.minify(fs.readFileSync(s,"utf8"),{
//permet de renommer les noms de variables afin de les raccourcir et rendre le code plus compact
mangle:!0,
//conserve tous les commentaires
output:{comments:!0}}),
/**
     * Méthode qui permet d'écrire des données dans un fichier de manière synchrone
     * Elle prend en entrée le chemin d'accès du fichier dans lequel on souhaite écrire les données
     * et les données à écrire
     **/
fs.writeFileSync(e,s.code))});
//pour exécuter : node uglifyJs.js