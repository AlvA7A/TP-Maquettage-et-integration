/**
 * Utilise uglifycss
 * Minifie tous les fichiers CSS dans le répertoire 'css' et les enregistre dans le dossier cssMin.
 * @param {String} imputFilePath - chemin d'accès du fichier d'entrée à compresser.
 * @param {String} outputFilePath - chemin d'accès du fichier de sortie à compresser.
 * Utilise le module fs pour parcourir le dossier "css".
 * Les fichiers minifiés sont enregistrés dans le repertoire 'cssMin' avec l'extension '.min.css'.
 **/
const fs=require("fs"),UglifyCSS=require("uglifycss");
//parcours tous les fichier dans le dossier "css"
fs.readdirSync("../css").forEach(s=>{
//Vérifie si le fichier se termine par '.css'
var e;s.endsWith(".css")&&(e="../css/"+s,s="../cssMin/"+s.replace(/\.css$/,".min.css"),e=UglifyCSS.processFiles([e],{
//longueur max ligne de sortie
maxLineLen:500,
//indique que les variables doivent être développées
expandVars:!0,
//conserve tous les commentaires
uglyComments:!0}),
/**
     * Méthode qui permet d'écrire des données dans un fichier de manière synchrone
     * Elle prend en entrée le chemin d'accès du fichier dans lequel on souhaite écrire les données
     * et les données à écrire
     **/
fs.writeFileSync(s,e))});
//pour exécuter : node uglifyCss.css